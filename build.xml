<?xml version="1.0"?>
<!DOCTYPE project [
  <!ENTITY maven        SYSTEM "xmls/maven.xml">
  <!ENTITY upload2maven SYSTEM "xmls/upload2maven.xml">
]>

<!-- =================== Build for PROJECT =================== -->
<!-- $Id: build.xml,v 1.10 2007/10/31 15:12:15 marsenger Exp $ -->

<project name="GRID plugin for Soaplab2"
  default="compile" basedir="."
  xmlns:artifact="urn:maven-artifact-ant">

  <!-- ================================================================== -->
  <!--                            Properties                              -->
  <!-- ================================================================== -->

  <!-- General properties -->
  <property environment="env"/>
  <property name="project.home" location="."/>
  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file="${project.home}/build.properties"/>
  <property file="${user.home}/build.properties"/>

  <!-- The directories containing sources and supporting files -->
  <property name="src.root"     value="src"/>
  <property name="src.main"     value="${src.root}/main"/>
  <property name="src.etc"      value="${src.root}/etc"/>
  <property name="src.config"   value="${src.etc}/config"/>
  <property name="src.scripts"  value="${src.etc}/scripts"/>

  <!-- Properties for the documentation and distribution -->
  <property name="docs.dir"            value="${project.home}/docs"/>
  <property name="javadoc.dir"         value="${docs.dir}/API"/>

  <!-- The directory containing third-party libraries
       (those that are not in a Maven repository) -->
  <property name="lib.dir" value="lib"/>

  <!-- Temporary build directories -->
  <property name="build.dir"      value="build"/>
  <property name="build.classes"  value="${build.dir}/classes"/>
  <property name="build.lib"      value="${build.dir}/lib"/>
  <property name="build.run"      value="${build.dir}/run"/>

  <!-- log4j properties -->
  <property name="log4j.configuration"  value="${project.home}/log4j.properties"/>
  <condition property="log4j.present">
    <available file="${log4j.configuration}"/>
  </condition>
  <!-- having established existence or non-existence of log4j.configuration
       we can create a proper piece of a command-line in log4j.value - that
       is used in a filter to update run-scripts
       -->
  <condition property="log4j.value" value="&quot;-Dlog4j.configuration=file:${log4j.configuration}&quot;">
    <isset property="log4j.present"/>
  </condition>
  <condition property="log4j.value" value="">
    <not><isset property="log4j.present"/></not>
  </condition>

  <!-- properties pointing outside of this project -->
  <property name="soaplab.dir" location="${project.home}/../soaplab2"/>
  <property name="grid.ui.dir" location="${project.home}/../UIPnPcomb"/>


  <!-- Classpath (without classes fetched from Maven repositories) -->
  <path id="build.classpath">
    <pathelement location="${build.classes}"/>
    <!--    <pathelement location="${soaplab.dir}/build/classes"/> -->

    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
    <!--
    <fileset dir="${soaplab.dir}/build/lib">
      <include name="*.jar"/>
    </fileset>
    -->
    <fileset dir="${grid.ui.dir}/glite/share/java">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${grid.ui.dir}/d-cache/srm/lib/globus">
      <include name="*.jar"/>
      <exclude name="jce-*.jar"/>
      <exclude name="junit.jar"/>
    </fileset>
    <fileset dir="${grid.ui.dir}/glite/externals/jclassads-2.2">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Excludes for compilation and API documentation -->
  <property name="project.excludes" value="**/notyet/**"/>

  <!-- ================================================================== -->
  <!--                            Targets/Tasks                           -->
  <!-- ================================================================== -->

  <!-- ================================================================== -->
  <!--                            Maven                                   -->
  <!-- ================================================================== -->
  &maven;
  &upload2maven;

  <!-- ================================================================== -->
  <!-- Initialize (whatever needs to be done)                             -->
  <!-- ================================================================== -->
  <target name="init" depends="initmaven">

    <!-- Set current date/time -->
    <tstamp>
      <format property="TODAY_LONG"  pattern="EEE MMM d HH:mm:ss z yyyy"/>
      <format property="TODAY_SHORT" pattern="yyyy-MM-dd"/>
    </tstamp>

    <!-- Create the build directories prior to the compile target -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.run}"/>

    <!-- Files dependent on the timestamp of the local build.properties -->
    <dependset>
      <srcfileset dir="${project.home}"     includes="build.properties"/>
      <srcfileset dir="${user.home}"        includes="build.properties"/>
      <targetfileset dir="${build.run}"     includes="run-* source* cp.bat library.path"/>
      <targetfileset dir="${build.classes}" includes="*.properties.template"/>
    </dependset>
    
    <!-- compilation options -->    
    <property name="compile.debug"       value="true" />
    <property name="compile.verbose"     value="false" />
    <property name="compile.deprecation" value="false" />
    <property name="compile.optimize"    value="false" />
    <property name="compile.warnings"    value="false" />

  </target>

  <!-- ================================================================== -->
  <!-- Compiles everything                                                -->
  <!-- ================================================================== -->
  <target name="compile" depends="config"
    description="Compile all source code (default).">

    <condition property="xlint.param" value="-Xlint:unchecked" else="-Xlint:none">
      <istrue value="${compile.warnings}"/>
    </condition>

    <javac
      srcdir="${src.main}"
      destdir="${build.classes}"
      verbose="${compile.verbose}"
      debug="${compile.debug}"
      debuglevel="lines,vars,source"
      deprecation="${compile.deprecation}"
      optimize="${compile.optimize}"
      excludes="${project.excludes}">
      <classpath refid="build.classpath"/>
      <classpath refid="dependency.classpath"/>
      <compilerarg value="${xlint.param}"/>
    </javac>
    
  </target>

  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->
  <target name="config" depends="init"
    description="Make all necessary configuration steps.">

    <pathconvert property="libs.path" refid="dependency.fileset"/>
    <pathconvert property="libs.path.2">
      <path>
        <fileset dir="${lib.dir}">
          <include name="*.jar"/>
          <exclude name="maven-artifact-ant-2.0.4-dep.jar"/>
        </fileset>
      </path>
    </pathconvert>

    <!-- filter for configuration files and run scripts -->
    <filterset id="general.filter">
      <filter token="PROJECT_HOME" value="${basedir}"/>
      <!--      <filter token="SOAPLAB_HOME" value="${soaplab.dir}"/> -->
      <filter token="GRID_UI_HOME" value="${grid.ui.dir}"/>
      <filter token="LOG4J"        value="${log4j.value}"/>
      <filter token="PROJECT_DEPS" value="${libs.path}${path.separator}${libs.path.2}"/>
    </filterset>

    <copy todir="${build.classes}">
      <fileset dir="${src.main}" includes="**/help/"/>
    </copy>
    
    <copy
      file="${src.config}/log4j.properties.template"
      tofile="${project.home}/log4j.properties"/>
    <copy file="${project.home}/log4j.properties"
      tofile="${build.classes}/log4j.properties"/>
    
    <copy file="${src.config}/universal.jdl.template"
      tofile="${build.classes}/universal.jdl"/>
    
    <property name="my.bioinfogrid.properties"
      location="${src.config}/bioinfogrid.properties.template"/>
    
    <copy
      file="${my.bioinfogrid.properties}"
      tofile="${build.classes}/bioinfogrid.properties">
      <filterset refid="general.filter"/>
    </copy>

    <copy
      file="${src.config}/library.path.template"
      tofile="${build.run}/library.path">
      <filterset refid="general.filter"/>
    </copy>

    <copy todir="${build.run}">
      <fileset dir="${src.scripts}" includes="run-* source.me* cp.bat"/>
      <filterset refid="general.filter"/>
    </copy>
    <chmod dir="${build.run}" includes="run-*" perm="a+rx"/>
    
  </target>

  <!-- ================================================================== -->
  <!-- Clean-up                                                           -->
  <!-- ================================================================== -->
  <target name="clean" depends="cleanapi"
    description="Remove all generated files.">
    <delete dir="${build.dir}"/>
  </target>

   <target name="cleanapi">
     <delete quiet="true" includeEmptyDirs="true">
       <fileset dir="${javadoc.dir}" excludes=".cvsignore*"/>
     </delete>
   </target>

  <!-- ================================================================== -->
  <!-- Builds a jar file with project classes                             -->
  <!-- ================================================================== -->
  <target name="jars" depends="compile"
    description="Create jars files related to this project.">

    <property name="released.date" value="${TODAY_SHORT}"/>
    <property name="jar.all.name"  value="${maven.project.artifactId}.jar"/>

    <jar destfile="${build.lib}/${jar.all.name}"> 
      <fileset dir="${build.classes}"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Released-Date" value="${released.date}"/>
      </manifest>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation:                                      -->
  <!-- =================================================================== -->
  <target name="docs" depends="compile,cleanapi"
    description="Generate API documentation.">

    <javadoc
      additionalparam="-quiet"
      packagenames="*.*"
      excludepackagenames="notyet"
      destdir="${javadoc.dir}"
      defaultexcludes="yes"
      breakiterator="yes"
      windowtitle="Project..."
      doctitle="Project.."
      author="true"
      version="true"
      use="true"
      public="true">
      <classpath refid="build.classpath"/>
      <classpath refid="dependency.classpath"/>
      
      <!-- included files -->
      <sourcepath>
        <pathelement location="${src.main}"/>
      </sourcepath>
      
      <header><![CDATA[<font size='-1'>Version: ${maven.project.version}</font>]]></header>
      <bottom><![CDATA[<font size='-1'><a href='mailto:martin.senger@gmail.com?subject=BioinfoGRID plugin'>Submit a bug or feature</a><BR>Generated: ${TODAY_LONG}</font>]]></bottom>
      
    </javadoc>
  </target>

  <!-- ================================================================== -->
  <!-- pack Java API                                                      -->
  <!-- ================================================================== -->
  <target name="packapi" depends="docs"
    description="Pack together API docs so it can be moved somewhere else.">
    <property name="pack.api.file" value="bioinfogrid-plugin.api"/>
    <tar
      destfile="${build.dir}/${pack.api.file}.tar.gz"
      basedir="${javadoc.dir}"
      excludes=".cvsignore*"
      compression="gzip"
      longfile="gnu"/>
    <zip
      destfile="${build.dir}/${pack.api.file}.zip"
      excludes=".cvsignore*"
      basedir="${javadoc.dir}"/>
  </target>

  <!-- ================================================================== -->
  <!-- all: builds everything                                             -->
  <!-- ================================================================== -->
  <target name="all" depends="clean,compile,jars,docs"
    description="Clean, compile, etc.."/>


  <!-- ================================================================== -->
  <!-- Generating metadata: from ACD files to XML                         -->
  <!-- ================================================================== -->
  <target name="gen" depends="init"
    description="Generate XML metadata from ACD. Using old Perl generator.">

    <typedef name="ls" classname="embl.ebi.tasks.TaskLs">
      <classpath>
        <fileset dir="${soaplab.dir}/lib">
          <include name="mytasks.jar"/>
        </fileset>
      </classpath>
    </typedef>

    <property name="generator.dir"     location="${soaplab.dir}/metadata/old.generator"/>
    <property name="sowa.acd.dir"      location="${basedir}/src/etc/acd"/>
    <property name="sl"                location="${basedir}/metadata/generated/GridApplications.xml"/>
    <property name="gen.output.base"   location="${basedir}"/>
    <property name="gen.job.class"     value="org.bioinfogrid.services.GridJobFactory"/>
    <property name="installation.name" value="BioinfoGRID"/>

    <ls dir="${sowa.acd.dir}" property="sa" includes="*.acd" onlybasename="true"/>

    <copy file="${soaplab.dir}/src/etc/config/generator.config.template"
      tofile="${generator.dir}/al.Cfg.pl"
      overwrite="yes">
      <filterset>
        <filter token="PROJECT_DIR"           value="${gen.output.base}"/>
        <filter token="SUB_PROJECT"           value="sowa"/>
        <filter token="PACKAGE_INSTALLATION"  value="${installation.name}"/>
        <filter token="JOB_CLASS"             value="${gen.job.class}"/>
      </filterset>
    </copy>
    
    <exec executable="perl" taskname="acd2xml" failonerror="true">
      <arg line="${generator.dir}/acd2xml -d -l ${sl}  -r ${sowa.acd.dir} ${sa}"/>
    </exec>
     
  </target>


  <!-- ================================================================== -->
  <!-- Just for testing...                                                -->
  <!-- ================================================================== -->
  <target name="testing" depends="init">
    <echo message="${TODAY_LONG}"/>
    <echo message="${TODAY_SHORT}"/>
    <echo message="${log4j.present}"/>
    <echo message="${log4j.configuration}"/>
    <echo message="${log4j.value}"/>
    <echo message="${java.class.path}"/>
  </target>

</project>
